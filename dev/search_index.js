var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = PairedLinkedLists","category":"page"},{"location":"#PairedLinkedLists","page":"Home","title":"PairedLinkedLists","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for PairedLinkedLists.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [PairedLinkedLists]","category":"page"},{"location":"#PairedLinkedLists.PairedLinkedLists","page":"Home","title":"PairedLinkedLists.PairedLinkedLists","text":"PairedLinkedLists.jl provides doubly-linked lists as well as \"paired lists\" that also contain links between nodes in two separate lists.\n\nArray-like functionality is supported for DoublyLinkedList and PairedLinkedList:\n\n    julia> using PairedLinkedLists\n\n    julia> l = DoublyLinkedList{Int}(0)\n    DoublyLinkedList{Int64}(0)\n\n    julia> push!(l, 1:10...)\n    DoublyLinkedList{Int64}(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\n    julia> l[5] = 3;\n\n    julia> popfirst!(l)\n    0\n\n    julia> l\n    DoublyLinkedList{Int64}(1, 2, 3, 4, 3, 6, 7, 8, 9)\n\nSupported methods include push!, pushfirst!, pop!, popfirst!, popat!, delete!, insert!, and splice!.\n\n\n\n\n\n","category":"module"},{"location":"#PairedLinkedLists.DoublyLinkedList","page":"Home","title":"PairedLinkedLists.DoublyLinkedList","text":"l = DoublyLinkedList{::Type}() l = DoublyLinkedList(elts...)\n\nCreate a DoublyLinkedList with elements of a specified type or containing a series of ordered elements. \n\nThe list contains its length len, a \"dummy\" node head at the beginning of the list, and a \"dummy\" node tail at the end of the list . \n\nThe first \"real\" node of a list  l can be accessed with l.head.next. Similarly, the last \"real\" node can be accessed with l.tail.prev.\n\n\n\n\n\n","category":"type"},{"location":"#PairedLinkedLists.ListNode","page":"Home","title":"PairedLinkedLists.ListNode","text":"node = ListNode(list::DoublyLinkedList, data)\n\nCreate a ListNode belonging to the specified list. The node contains a reference list to the parent list,  the provided data, a link prev to the preceding node, and a link next to the following node.\n\n\n\n\n\n","category":"type"},{"location":"#PairedLinkedLists.PairedListNode","page":"Home","title":"PairedLinkedLists.PairedListNode","text":"node = PairedListNode(list::PairedLinkedList, data)\n\nCreate a PairedListNode belonging to the specified list. The node contains a reference list to the parent list,  the provided data, a link prev to the preceding node, a link next to the following node, and link partner to another PairedListNode.\n\nA node's partner should always either be a reference to itself (denoting unpaired node) or a node belonging to the partner of its parent list.\n\n\n\n\n\n","category":"type"},{"location":"#PairedLinkedLists.deletenode!-Tuple{ListNode}","page":"Home","title":"PairedLinkedLists.deletenode!","text":"deletenode!(node::ListNode)\n\nRemove node from the list to which it belongs, update the list's length, and return the node.\n\n\n\n\n\n","category":"method"},{"location":"#PairedLinkedLists.getnode-Tuple{AbstractLinkedList, Int64}","page":"Home","title":"PairedLinkedLists.getnode","text":"node = getnode(l::AbstractLinkedList, index)\n\nReturn the \n\n\n\n\n\n","category":"method"},{"location":"#PairedLinkedLists.insertnode!-Union{Tuple{T}, Tuple{AbstractListNode{T}, AbstractListNode{T}}} where T","page":"Home","title":"PairedLinkedLists.insertnode!","text":"insertnode!(node, prev)\n\nInsert node into a list after the preceding node prev, update the list's length, and return the node.\n\nnode and prev must belong to the same list.\n\n\n\n\n\n","category":"method"},{"location":"#PairedLinkedLists.ispaired-Tuple{PairedListNode}","page":"Home","title":"PairedLinkedLists.ispaired","text":"ispaired(node::PairedListNode) -> Bool\n\nReturn true if node has a partner (that is, node.partner !== node), and false otherwise. \n\n\n\n\n\n","category":"method"},{"location":"#PairedLinkedLists.newnode-Union{Tuple{T}, Tuple{DoublyLinkedList{T}, Any}} where T","page":"Home","title":"PairedLinkedLists.newnode","text":"node = newnode(l::AbstractLinkedList, data)\n\nCreate an AbstractListNode containing data of the appropriate type for the provided list l  (e.g. a ListNode is created for a DoublyLinkedList).\n\n\n\n\n\n","category":"method"},{"location":"#PairedLinkedLists.removepair!-Tuple{PairedListNode}","page":"Home","title":"PairedLinkedLists.removepair!","text":"removepair!(node::PairedListNode)\n\nRemove the link between node and its partner (if node is paired) and return node.\n\n\n\n\n\n","category":"method"}]
}
