var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = PairedLinkedLists","category":"page"},{"location":"#PairedLinkedLists","page":"Home","title":"PairedLinkedLists","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for PairedLinkedLists.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [PairedLinkedLists]","category":"page"},{"location":"#PairedLinkedLists.PairedLinkedLists","page":"Home","title":"PairedLinkedLists.PairedLinkedLists","text":"PairedLinkedLists.jl provides implementations for doubly-linked lists  and skip lists, as well as \"paired lists\" that also contain inter-list links between nodes in two separate lists.\n\nSee also DoublyLinkedList, PairedLinkedList, SkipList, PairedSkipList\n\n\n\n\n\n","category":"module"},{"location":"#PairedLinkedLists.DoublyLinkedList","page":"Home","title":"PairedLinkedLists.DoublyLinkedList","text":"l = DoublyLinkedList{::Type}()\nl = DoublyLinkedList(elts...)\n\nCreate a DoublyLinkedList made up of ListNodes with with nodes containing data of a specified type.\n\nThe list contains its length len, a \"dummy\" node head at the beginning of the list, and a \"dummy\" node tail at the end of the list . \n\nThe first \"real\" node of a list l can be accessed with l.head.next or head(l). Similarly, the last \"real\" node can be accessed with l.tail.prev or tail(l).\n\nSee also ListNode, SkipList, PairedLinkedList, TargetedLinkedList\n\n\n\n\n\n","category":"type"},{"location":"#PairedLinkedLists.ListDataIterator","page":"Home","title":"PairedLinkedLists.ListDataIterator","text":"ListDataIterator(list; rev=false)\n\nReturns an iterator over the data contained in a linked list, starting at the specified node start.\n\nIf rev is true, the iterator will advance toward the head of the list. Otherwise, it will advance toward the tail of the list.\n\n\n\n\n\n","category":"type"},{"location":"#PairedLinkedLists.ListDataIterator-Union{Tuple{PairedLinkedLists.AbstractList{T}}, Tuple{T}} where T","page":"Home","title":"PairedLinkedLists.ListDataIterator","text":"ListDataIterator(list; rev=false)\n\nReturns an iterator over the data contained in a linked list.\n\nIf rev is true, the iterator will start at the tail of the list and advance toward the head. Otherwise, it will start at the head of the list and advance toward the tail.\n\n\n\n\n\n","category":"method"},{"location":"#PairedLinkedLists.ListNode","page":"Home","title":"PairedLinkedLists.ListNode","text":"node = ListNode(list::DoublyLinkedList [, data])\n\nCreate a ListNode belonging to the specified list. The node contains a reference list to the parent list and  contains the provided data, but it has no specific insertion point into list (see insertafter!).\n\nnode.prev and node.next represent the previous and next nodes, respectively, of a list.\n\nSee also DoublyLinkedList, PairedListNode, TargetedListNode.\n\n\n\n\n\n","category":"type"},{"location":"#PairedLinkedLists.ListNodeIterator","page":"Home","title":"PairedLinkedLists.ListNodeIterator","text":"ListNodeIterator(start; rev=false)\n\nReturns an iterator over the nodes of a linked list, starting at the specified node start.\n\nIf rev is true, the iterator will advance toward the head of the list. Otherwise, it will advance toward the tail of the list.\n\n\n\n\n\n","category":"type"},{"location":"#PairedLinkedLists.ListNodeIterator-Tuple{PairedLinkedLists.AbstractList}","page":"Home","title":"PairedLinkedLists.ListNodeIterator","text":"ListNodeIterator(list; rev=false)\n\nReturns an iterator over the nodes of a linked list.\n\nIf rev is true, the iterator will start at the tail of the list and advance toward the head. Otherwise, it will start at the head of the list and advance toward the tail.\n\n\n\n\n\n","category":"method"},{"location":"#PairedLinkedLists.PairedLinkedList","page":"Home","title":"PairedLinkedLists.PairedLinkedList","text":"l = PairedLinkedList{::Type}()\nl = PairedLinkedList{::Type}(elts...)\n\nCreate a PairedLinkedList made up of PairListNodes containing data of a specified type. Each node can have an inter-list link to a node belonging to the list's target.\n\nThe list contains its length len, a \"dummy\" node head at the beginning of the list, and a \"dummy\" node tail at the end of the list . \n\nThe first \"real\" node of a list l can be accessed with l.head.next or head(l). Similarly, the last \"real\" node can be accessed with l.tail.prev or tail(l).\n\nSee also PairedListNode, PairedSkipList, DoublyLinkedList, TargetedLinkedList\n\n\n\n\n\n","category":"type"},{"location":"#PairedLinkedLists.PairedListNode","page":"Home","title":"PairedLinkedLists.PairedListNode","text":"node = PairedListNode(list::PairedLinkedList, data)\n\nCreate a PairedListNode belonging to the specified list. The node contains a reference list to the parent list and  contains the provided data, but it has no specific insertion point into list (see insertafter!).\n\nnode.prev and node.next represent the previous and next nodes, respectively, of a list.\n\nA node's target should always either be a reference to itself (denoting unpaired node) or a node belonging to the target of its parent list.\n\nThe target link is assumed to be reciprocated for a PairedListNode. For example, node === node.target.target should be true. For one-way inter-list links, see TargetedListNode.\n\nSee also PairedLinkedList, ListNode, TargetedListNode.\n\n\n\n\n\n","category":"type"},{"location":"#PairedLinkedLists.PairedSkipList","page":"Home","title":"PairedLinkedLists.PairedSkipList","text":"l = PairedSkipList{::Type}(; sortedby=identity, skipfactor=2)\nl = PairedSkipList{::Type}(elts...; sortedby=identity, skipfactor=2)\n\nCreate a PairedSkipList with nodes containing data of a specified type. Each node can have an inter-list link to a node belonging to the list's target.\n\nThe list contains its length len, a \"dummy\" node head at the beginning of the list, and a \"dummy\" node tail at the end of the list. The list also contains a reference to its \"target\" list.\n\nThe first \"real\" node of a list  l can be accessed with l.head.next. Similarly, the last \"real\" node can be accessed with l.tail.prev.\n\nThe skipfactor of the list describes the average number of nodes \"skipped\" by the above level.\n\nThe ordering of the list can be specified by a function, sortedby.\n\nSee also SkipList, PairedSkipNode\n\n\n\n\n\n","category":"type"},{"location":"#PairedLinkedLists.PairedSkipNode","page":"Home","title":"PairedLinkedLists.PairedSkipNode","text":"node = PairedSkipNode(list::SkipList [, data])\n\nCreate a PairedSkipNode belonging to the specified list. The node contains a reference list to the parent skip list and contains the provided data, but it has no specific insertion point into list (see insertafter!).\n\nnode.prev and node.next represent the previous and next nodes, respectively, of a list. node.up and node.bottom represent the nodes in adjacent levels within the skip list data structure.\n\nA node's target should always either be a reference to itself (denoting unpaired node) or a node belonging to the target of its parent list.\n\nThe target link is assumed to be reciprocated for a PairedSkipNode. For example, node === node.target.target should be true.\n\nSee also PairedSkipList, SkipNode\n\n\n\n\n\n","category":"type"},{"location":"#PairedLinkedLists.SkipList","page":"Home","title":"PairedLinkedLists.SkipList","text":"l = SkipList{::Type}(; sortedby=identity, skipfactor=2)\nl = SkipList{::Type}(elts...; sortedby=identity, skipfactor=2)\n\nCreate a SkipList made of up SkipNodes containing data of a specified type.\n\nThe list contains a \"dummy\" node head at the beginning of the list and a \"dummy\" node tail at the end of the list.\n\nThe node at the head of the topmost level of the datastructure can be accessed by l.top.\n\nThe first \"real\" node of a list l can be accessed with l.head.next or head(l). Similarly, the last \"real\" node can be accessed with l.tail.prev or tail(l).\n\nThe skipfactor of the list describes the average number of nodes \"skipped\" by the above level.\n\nThe ordering of the list can be specified by a function, sortedby.\n\nSee also PairedSkipList, SkipNode\n\n\n\n\n\n","category":"type"},{"location":"#PairedLinkedLists.SkipNode","page":"Home","title":"PairedLinkedLists.SkipNode","text":"node = SkipNode(list::SkipList [, data])\n\nCreate a SkipNode belonging to the specified list. The node contains a reference list to the parent skip list and contains the provided data, but it has no specific insertion point into list (see insertafter!).\n\nnode.prev and node.next represent the previous and next nodes, respectively, of a list. node.up and node.bottom represent the nodes in adjacent levels within the skip list data structure.\n\nSee also SkipList, PairedSkipNode\n\n\n\n\n\n","category":"type"},{"location":"#PairedLinkedLists.TargetedLinkedList","page":"Home","title":"PairedLinkedLists.TargetedLinkedList","text":"l = TargetLinkedList{T,R}()\nl = TargetLinkedList{T,R}(elts...)\nl = TargetLinkedList(list)\n\nCreate a TargetLinkedList made up of TargetedListNodes containing data of a specified type. Each node can have an inter-list link to a node belonging to the list's target.\n\nThe list contains its length len, a \"dummy\" node head at the beginning of the list, and a \"dummy\" node tail at the end of the list. The list also contains a reference to its \"target\" list.\n\nThe first \"real\" node of a list  l can be accessed with l.head.next or head(l).  Similarly, the last \"real\" node can be accessed with l.tail.prev or tail(l).\n\nSee also TargetedListNode, DoublyLinkedList, PairedLinkedList\n\n\n\n\n\n","category":"type"},{"location":"#PairedLinkedLists.TargetedListNode","page":"Home","title":"PairedLinkedLists.TargetedListNode","text":"node = TargetListNode(list::AbstractTargetLinkedList, data, [target::AbstractListNode])\n\nCreate a TargetedListNode belonging to the specified list. The node contains a reference list to the parent list and  contains the provided data, but it has no specific insertion point into list (see insertafter!).\n\nnode.prev and node.next represent the previous and next nodes, respectively, of a list.\n\nA node's target should always either be a reference to itself (denoting unpaired node) or a node belonging to the target of its parent list.\n\nThe target link is not assumed to be reciprocated for a PairedListNode, as the targeted node may not even have a target field.  For guranteed two-way inter-list links, see PairedListNode.\n\nSee also TargetedLinkedList, PairedListNode, ListNode.\n\n\n\n\n\n","category":"type"},{"location":"#PairedLinkedLists.addtarget!-Union{Tuple{L}, Tuple{L, L}} where L<:Union{PairedLinkedLists.AbstractPairedLinkedList, PairedLinkedLists.AbstractPairedSkipList}","page":"Home","title":"PairedLinkedLists.addtarget!","text":"addtarget!(node, target_node)\naddtarget!(list, target_list)\n\nAdd a link between a the provided node or list and another object of the same type to be assigned its target. \n\nIf the first object is a `PairedListNode' or a 'PairedLinkedList' and either object previously had a target, the prior link is removed.\n\nIf the first object is a TargetedListNode or a TargetedLinkedList, the second object remains unchanged.\n\nSee also hastarget, removetarget!\n\n\n\n\n\n","category":"method"},{"location":"#PairedLinkedLists.athead-Tuple{PairedLinkedLists.AbstractNode}","page":"Home","title":"PairedLinkedLists.athead","text":"athead(node) -> Bool\n\nReturn true if the node is the \"dummy\" node at the beginning of the list, and false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"#PairedLinkedLists.attail-Tuple{PairedLinkedLists.AbstractNode}","page":"Home","title":"PairedLinkedLists.attail","text":"attail(node) -> Bool\n\nReturn true if the node is the \"dummy\" node at the end of the list, and false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"#PairedLinkedLists.deletenode!-Tuple{PairedLinkedLists.AbstractSkipNode}","page":"Home","title":"PairedLinkedLists.deletenode!","text":"deletenode!(node::SkipNode)\n\nRemove node from the list to which it belongs, update the list's length, and return the node.\n\nThe node can be at any level of the skip list, and all nodes directly above or below will also be removed.\n\n\n\n\n\n","category":"method"},{"location":"#PairedLinkedLists.deletenode!-Tuple{Union{PairedLinkedLists.AbstractTargetedListNode, ListNode}}","page":"Home","title":"PairedLinkedLists.deletenode!","text":"deletenode!(node::ListNode)\n\nRemove node from the list to which it belongs, update the list's length, and return the node.\n\n\n\n\n\n","category":"method"},{"location":"#PairedLinkedLists.getnode-Tuple{PairedLinkedLists.AbstractList, Int64}","page":"Home","title":"PairedLinkedLists.getnode","text":"node = getnode(l::AbstractList, index)\n\nReturn the node at the specified index of the list.\n\n\n\n\n\n","category":"method"},{"location":"#PairedLinkedLists.hastarget-Tuple{Union{PairedLinkedLists.AbstractPairedLinkedList, PairedLinkedLists.AbstractPairedListNode, PairedLinkedLists.AbstractPairedSkipList, PairedLinkedLists.AbstractPairedSkipNode, PairedLinkedLists.AbstractTargetedListNode}}","page":"Home","title":"PairedLinkedLists.hastarget","text":"hastarget(node) -> Bool\nhastarget(list) -> Bool\n\nReturn true if the provided node or list has a target, and false otherwise.\n\nSee also addtarget!, removetarget!\n\n\n\n\n\n","category":"method"},{"location":"#PairedLinkedLists.head-Tuple{PairedLinkedLists.AbstractList}","page":"Home","title":"PairedLinkedLists.head","text":"node = head(list)\n\nReturns the first \"real\" node in the list. Note that this is not the same as list.head, which is a \"dummy\" node.\n\n\n\n\n\n","category":"method"},{"location":"#PairedLinkedLists.insertafter!-Union{Tuple{N}, Tuple{N, N}} where N<:PairedLinkedLists.AbstractNode","page":"Home","title":"PairedLinkedLists.insertafter!","text":"insertafter!(node, prev)`\n\nInsert node into a list after the preceding node prev, update the list's length, and return the node.\n\nnode and prev must belong to the same list.\n\n\n\n\n\n","category":"method"},{"location":"#PairedLinkedLists.insertbefore!-Union{Tuple{N}, Tuple{N, N}} where N<:PairedLinkedLists.AbstractNode","page":"Home","title":"PairedLinkedLists.insertbefore!","text":"insertbefore!(node, next)`\n\nInsert node into a list before the subsequent node next, update the list's length, and return the node.\n\nnode and next must belong to the same list.\n\n\n\n\n\n","category":"method"},{"location":"#PairedLinkedLists.listtype-Union{Tuple{Type{<:PairedLinkedLists.AbstractNode{T, L}}}, Tuple{L}, Tuple{T}} where {T, L}","page":"Home","title":"PairedLinkedLists.listtype","text":"t = listtype(::AbstractNode)\nt = listtype(::Type{<:AbstractNode})\n\nReturn the type of list that can contain the provided type of node.\n\n\n\n\n\n","category":"method"},{"location":"#PairedLinkedLists.newnode-Tuple{PairedLinkedLists.AbstractList, Any}","page":"Home","title":"PairedLinkedLists.newnode","text":"node = newnode(list, data)\n\nCreate an list node containing data of the appropriate type for the provided list. (e.g. a ListNode is created for a DoublyLinkedList). \n\nThe node is disconnected from the list (see insertafter!).\n\n\n\n\n\n","category":"method"},{"location":"#PairedLinkedLists.nodetype-Union{Tuple{Type{<:DoublyLinkedList{T}}}, Tuple{T}} where T","page":"Home","title":"PairedLinkedLists.nodetype","text":"t = nodetype(::AbstractList)\nt = nodetype(::Type{<:AbstractList})\n\nReturn the type of the nodes contained in the list.\n\n\n\n\n\n","category":"method"},{"location":"#PairedLinkedLists.removetarget!-Tuple{Union{PairedLinkedLists.AbstractPairedListNode, PairedLinkedLists.AbstractPairedSkipNode}}","page":"Home","title":"PairedLinkedLists.removetarget!","text":"removetarget!(node)\n\nRemove the link between the node or list and its target (if the object is already paired) and return node.\n\nIf the object is a PairedListNode or PairedLinkedList, the link will be deleted from both the object and its target.\n\nIf the object is a TargetedListNode or PairedLinkedList, the link will be deleted from only the object.\n\nSee also hastarget, addtarget!\n\n\n\n\n\n","category":"method"},{"location":"#PairedLinkedLists.tail-Tuple{PairedLinkedLists.AbstractList}","page":"Home","title":"PairedLinkedLists.tail","text":"node = head(list)\n\nReturns the last \"real\" node in the list. Note that this is not the same as list.tail, which is a \"dummy\" node.\n\n\n\n\n\n","category":"method"}]
}
